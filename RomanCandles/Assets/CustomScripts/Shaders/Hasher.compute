// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel CSClear

struct Ejecta {
    float3 pos;
    float3 v;
    float4 color;
    int landed;
};
RWStructuredBuffer<Ejecta> Ejectas;
//RWStructuredBuffer<Ejecta> Hash;
RWTexture3D<float4> hash;
RWTexture3D<float4> hashC;
float4 gridSize;
float4 gridMin;
float binLength; //length of each bin in worldspace
int binSize; //maximum number of ejecta per bin
int3 binsPerAxis;

int3 binCoord(float3 pos) {
    float3 relativePos = pos - gridMin.xyz;
    int3 posI = int3(floor(relativePos/binLength));
    return posI;
}

float3 worldCoord(int3 b) {
    float3 middle = float3(b + float3(binLength, binLength, binLength));
    return middle + gridMin.xyz;
}

float3 colorToCoord(float4 c) {
    float3 t = float3(c.x * gridSize.x, c.y * gridSize.y, c.z * gridSize.z);
    return (t + gridMin.xyz);
}
float4 coordToColor(float3 p) {
    float3 t = p - gridMin.xyz;
    return float4(t.x / gridSize.x, t.y / gridSize.y, t.z / gridSize.z, 1.0);
}

int bin(float3 pos) {
    int3 coord = binCoord(pos);
    return coord.x + binsPerAxis.x * (coord.y + binsPerAxis.y * coord.z);
}

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    Ejecta e = Ejectas[id.x];
    if (e.pos.y < 0.1) return;
    int3 b = binCoord(e.pos);
    //for (int i = b*binSize; i < (b+1)*binSize; i++) {
    //    if (Hash[i].pos.y == 0) {
    //        Hash[i] = e;
    //        break;
    //    }
    //}
    for (int i = b.x - 4; i <= b.x + 4; i++) {
        for (int j = b.y - 4; j <= b.y + 4; j++) {
            for (int k = b.z - 4; k <= b.z + 4; k++) {
                int3 p = int3(i, j, k);
                if (p.x < 0 || p.y < 0 || p.z < 0 || p.x > gridSize.x || p.y > gridSize.y || p.z > gridSize.z) continue;
                float3 binCenter = worldCoord(p);
                if (hash[p].w == 0 || distance(binCenter, e.pos) < distance(colorToCoord(hash[p]), binCenter)) {
                    hash[p] = coordToColor(e.pos);
                    hashC[p] = e.color;
                }
            }
        }
    }
}

[numthreads(8, 8, 8)]
void CSClear(uint3 id : SV_DispatchThreadID)
{
    hash[id] = float4(0, 0, 0, 0);
    hashC[id] = float4(0, 0, 0, 0);
}
