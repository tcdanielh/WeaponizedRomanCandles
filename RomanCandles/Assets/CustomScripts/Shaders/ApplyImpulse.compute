// Each #kernel tells which function to compile; you can have many kernels


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture3D<float4> Prev;
RWTexture3D<float4> Result;

float4 position, size;

float time, radius, power, force, dt;


#pragma kernel AddDensity
[numthreads(8,8,8)]
void AddDensity (uint3 id : SV_DispatchThreadID)
{
  // TODO: insert actual code here!
    //float3 pos = id.xyz - position.xyz;
    float3 pos = id/(size.xyz-1.0f) - position.xyz;
	float magnitude = pos.x*pos.x + pos.y*pos.y + pos.z*pos.z;
    //float distance = sqrt(magnitude);
    /*
    if(magnitude < radius) {
        Result[id.xyz] = float4(1000.0, 0.0, 0.0, 0.0);
    } else {
        Result[id.xyz] = float4(0.0, 0.0, 0.0, 0.0);
    }
    */
    /**/
    //Result[id.xyz] = max(radius - distance, 0.0f) * 100;
	float radius2 = radius*radius;
	//float threshold = 15.0f;
	float quantity = exp(-magnitude/radius2) * power;
    //float quantity = max(radius - distance, 0.0);
    //Result[id.xyz] = vector4(quantity, 0.0, 0.0, 0.0);
    Result[id.xyz] = Prev[id.xyz] + float4(quantity, 0.0, 0.0, 0.0);///quantity;

}

#pragma kernel ApplyForce
[numthreads(8,8,8)]
void ApplyForce (uint3 id : SV_DispatchThreadID)
{
    
    float3 c = force * dt * exp(pow(id/(size.xyz-1.0f) - position.xyz, 2.0f) / radius);
    Result[id.xyz] = Prev[id.xyz] + float4(c, 0.0);
    
    //Result[id.xyz] = float4(0.0, 0, 10.0, 0);
}

